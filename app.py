import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

# Load the Keras model
@st.cache_resource
def load_model():
    model_path = "./CNN_art_classifier.h5"  # Path to your .h5 model file
    model = tf.keras.models.load_model(model_path)
    return model

# Preprocess the image
def preprocess_image(image):
    # Convert the image to RGB (remove alpha channel if present)
    image = image.convert("RGB")

    # Resize image to 32x32 (model's input size)
    image = image.resize((32, 32))

    # Normalize image to [0, 1]
    image_array = np.array(image).astype("float32") / 255.0

    # Add batch dimension
    image_array = np.expand_dims(image_array, axis=0)

    return image_array


# Predict the class
def predict(image, model):
    input_tensor = preprocess_image(image)
    predictions = model.predict(input_tensor)
    predicted_class = np.argmax(predictions, axis=-1)[0]
    return predicted_class

# Corrected class labels
class_names = ["AI-generated", "Human-generated"]

# Streamlit app
st.title("Human vs AI Image Classifier")
st.write("Upload an image to determine whether it was created by a human or generated by AI.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    # Display uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_container_width=True)

    # Load the model
    st.write("Loading the model...")
    model = load_model()

    # Predict the class
    st.write("Classifying the image...")
    predicted_class = predict(image, model)
    st.write(f"Predicted Class: {class_names[predicted_class]}")
